

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Oct 22 23:17:34 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	intentry,global,class=CODE,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     0008                     	;# 
   116     0009                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     0088                     	;# 
   147     0089                     	;# 
   148     008C                     	;# 
   149     008D                     	;# 
   150     008E                     	;# 
   151     0091                     	;# 
   152     0092                     	;# 
   153     0093                     	;# 
   154     0094                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     010C                     	;# 
   162     010D                     	;# 
   163     010E                     	;# 
   164     010F                     	;# 
   165     018C                     	;# 
   166     018D                     	;# 
   167     000B                     _INTCON	set	11
   168     000C                     _PIR1	set	12
   169     0006                     _PORTB	set	6
   170     0010                     _T1CON	set	16
   171     000E                     _TMR1L	set	14
   172     000F                     _TMR1H	set	15
   173     008C                     _PIE1	set	140
   174     0086                     _TRISB	set	134
   175                           
   176                           	psect	cinit
   177     0011                     start_initialization:	
   178                           ; #config settings
   179                           
   180     0011                     __initialization:
   181                           
   182                           ; Clear objects allocated to COMMON
   183     0011  01F3               	clrf	__pbssCOMMON& (0+127)
   184     0012  01F4               	clrf	(__pbssCOMMON+1)& (0+127)
   185     0013                     end_of_initialization:	
   186                           ;End of C runtime variable initialization code
   187                           
   188     0013                     __end_of__initialization:
   189     0013  0183               	clrf	3
   190     0014  120A  118A  283D   	ljmp	_main	;jump to C main() function
   191                           
   192                           	psect	bssCOMMON
   193     0073                     __pbssCOMMON:
   194     0073                     _val:
   195     0073                     	ds	2
   196                           
   197                           	psect	cstackCOMMON
   198     0070                     __pcstackCOMMON:
   199     0070                     ?_main:
   200     0070                     ?_ISR:	
   201                           ; 1 bytes @ 0x0
   202                           
   203     0070                     ??_ISR:	
   204                           ; 1 bytes @ 0x0
   205                           
   206                           
   207                           ; 1 bytes @ 0x0
   208     0070                     	ds	3
   209     0073                     ??_main:
   210                           
   211                           	psect	maintext
   212     003D                     __pmaintext:	
   213                           ; 1 bytes @ 0x3
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 22 in file "task_interrupt_timer_1.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;		None
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, status,2, status,0, btemp+1
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   233 ;;      Params:         0       0       0       0       0
   234 ;;      Locals:         0       0       0       0       0
   235 ;;      Temps:          0       0       0       0       0
   236 ;;      Totals:         0       0       0       0       0
   237 ;;Total ram usage:        0 bytes
   238 ;; Hardware stack levels required when called: 1
   239 ;; This function calls:
   240 ;;		Nothing
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246     003D                     _main:	
   247                           ;psect for function _main
   248                           
   249     003D                     l577:	
   250                           ;incstack = 0
   251                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1]
   252                           
   253                           
   254                           ;task_interrupt_timer_1.c: 26:     TRISB = 0x00;
   255     003D  1683               	bsf	3,5	;RP0=1, select bank1
   256     003E  1303               	bcf	3,6	;RP1=0, select bank1
   257     003F  0186               	clrf	6	;volatile
   258                           
   259                           ;task_interrupt_timer_1.c: 30:     TMR1H = 0x00;
   260     0040  1283               	bcf	3,5	;RP0=0, select bank0
   261     0041  1303               	bcf	3,6	;RP1=0, select bank0
   262     0042  018F               	clrf	15	;volatile
   263                           
   264                           ;task_interrupt_timer_1.c: 31:     TMR1L = 0x00;
   265     0043  018E               	clrf	14	;volatile
   266     0044                     l579:
   267                           
   268                           ;task_interrupt_timer_1.c: 35:     T1CON = 0x01;
   269     0044  3001               	movlw	1
   270     0045  0090               	movwf	16	;volatile
   271     0046                     l581:
   272                           
   273                           ;task_interrupt_timer_1.c: 38:     PORTB = 0x01;
   274     0046  3001               	movlw	1
   275     0047  0086               	movwf	6	;volatile
   276     0048                     l583:
   277                           
   278                           ;task_interrupt_timer_1.c: 41:     T1CON |= 0x01;
   279     0048  1410               	bsf	16,0	;volatile
   280     0049                     l585:
   281                           
   282                           ;task_interrupt_timer_1.c: 45:     PIE1 |= 0x01;
   283     0049  1683               	bsf	3,5	;RP0=1, select bank1
   284     004A  1303               	bcf	3,6	;RP1=0, select bank1
   285     004B  140C               	bsf	12,0	;volatile
   286     004C                     l587:
   287                           
   288                           ;task_interrupt_timer_1.c: 48:     PIR1 &= 0xFE;
   289     004C  30FE               	movlw	254
   290     004D  00FF               	movwf	btemp+1
   291     004E  087F               	movf	btemp+1,w
   292     004F  1283               	bcf	3,5	;RP0=0, select bank0
   293     0050  1303               	bcf	3,6	;RP1=0, select bank0
   294     0051  058C               	andwf	12,f	;volatile
   295     0052                     l589:
   296                           
   297                           ;task_interrupt_timer_1.c: 52:     INTCON |= 0xC0;
   298     0052  30C0               	movlw	192
   299     0053  00FF               	movwf	btemp+1
   300     0054  087F               	movf	btemp+1,w
   301     0055  048B               	iorwf	11,f	;volatile
   302     0056                     l23:	
   303                           ;task_interrupt_timer_1.c: 55:     while(1) {
   304                           
   305     0056                     l24:	
   306                           ;task_interrupt_timer_1.c: 58:     }
   307                           
   308     0056  2856               	goto	l23
   309     0057  120A  118A  280E   	ljmp	start
   310     005A                     __end_of_main:
   311                           
   312                           	psect	text1
   313     0017                     __ptext1:	
   314 ;; *************** function _ISR *****************
   315 ;; Defined at:
   316 ;;		line 63 in file "task_interrupt_timer_1.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;		None
   321 ;; Return value:  Size  Location     Type
   322 ;;                  1    wreg      void 
   323 ;; Registers used:
   324 ;;		wreg, status,2, status,0, btemp+1
   325 ;; Tracked objects:
   326 ;;		On entry : 0/0
   327 ;;		On exit  : 0/0
   328 ;;		Unchanged: 0/0
   329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   330 ;;      Params:         0       0       0       0       0
   331 ;;      Locals:         0       0       0       0       0
   332 ;;      Temps:          3       0       0       0       0
   333 ;;      Totals:         3       0       0       0       0
   334 ;;Total ram usage:        3 bytes
   335 ;; Hardware stack levels used: 1
   336 ;; This function calls:
   337 ;;		Nothing
   338 ;; This function is called by:
   339 ;;		Interrupt level 1
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343     0017                     _ISR:	
   344                           ;psect for function _ISR
   345                           
   346     0017                     i1l591:
   347                           
   348                           ;task_interrupt_timer_1.c: 65:     if (PIR1 & 0x01) {
   349     0017  1283               	bcf	3,5	;RP0=0, select bank0
   350     0018  1303               	bcf	3,6	;RP1=0, select bank0
   351     0019  1C0C               	btfss	12,0	;volatile
   352     001A  281C               	goto	u1_21
   353     001B  281D               	goto	u1_20
   354     001C                     u1_21:
   355     001C  2834               	goto	i1l33
   356     001D                     u1_20:
   357     001D                     i1l593:
   358                           
   359                           ;task_interrupt_timer_1.c: 67:         val++;
   360     001D  3001               	movlw	1
   361     001E  07F3               	addwf	_val,f
   362     001F  1803               	skipnc
   363     0020  0AF4               	incf	_val+1,f
   364     0021  3000               	movlw	0
   365     0022  07F4               	addwf	_val+1,f
   366     0023                     i1l595:
   367                           
   368                           ;task_interrupt_timer_1.c: 70:         if (val == 15) {
   369     0023  300F               	movlw	15
   370     0024  0673               	xorwf	_val,w
   371     0025  0474               	iorwf	_val+1,w
   372     0026  1D03               	btfss	3,2
   373     0027  2829               	goto	u2_21
   374     0028  282A               	goto	u2_20
   375     0029                     u2_21:
   376     0029  2830               	goto	i1l601
   377     002A                     u2_20:
   378     002A                     i1l597:
   379                           
   380                           ;task_interrupt_timer_1.c: 71:             PORTB ^= 0x01;
   381     002A  3001               	movlw	1
   382     002B  00FF               	movwf	btemp+1
   383     002C  087F               	movf	btemp+1,w
   384     002D  0686               	xorwf	6,f	;volatile
   385     002E                     i1l599:
   386                           
   387                           ;task_interrupt_timer_1.c: 72:             val = 0;
   388     002E  01F3               	clrf	_val
   389     002F  01F4               	clrf	_val+1
   390     0030                     i1l601:
   391                           
   392                           ;task_interrupt_timer_1.c: 76:         PIR1 &= 0xFE;
   393     0030  30FE               	movlw	254
   394     0031  00FF               	movwf	btemp+1
   395     0032  087F               	movf	btemp+1,w
   396     0033  058C               	andwf	12,f	;volatile
   397     0034                     i1l33:
   398     0034  0872               	movf	??_ISR+2,w
   399     0035  00FF               	movwf	btemp+1
   400     0036  0871               	movf	??_ISR+1,w
   401     0037  008A               	movwf	10
   402     0038  0E70               	swapf	??_ISR,w
   403     0039  0083               	movwf	3
   404     003A  0EFE               	swapf	btemp,f
   405     003B  0E7E               	swapf	btemp,w
   406     003C  0009               	retfie
   407     003D                     __end_of_ISR:
   408     007E                     btemp	set	126	;btemp
   409     007E                     wtemp0	set	126
   410                           
   411                           	psect	intentry
   412     0004                     __pintentry:	
   413                           ;incstack = 0
   414                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
   415                           
   416     0004                     interrupt_function:
   417     007E                     saved_w	set	btemp
   418     0004  00FE               	movwf	btemp
   419     0005  0E03               	swapf	3,w
   420     0006  00F0               	movwf	??_ISR
   421     0007  080A               	movf	10,w
   422     0008  00F1               	movwf	??_ISR+1
   423     0009  087F               	movf	btemp+1,w
   424     000A  00F2               	movwf	??_ISR+2
   425     000B  120A  118A  2817   	ljmp	_ISR
   426                           
   427                           	psect	config
   428                           
   429                           ;Config register CONFIG @ 0x2007
   430                           ;	Oscillator Selection bits
   431                           ;	FOSC = EXTRC, RC oscillator
   432                           ;	Watchdog Timer Enable bit
   433                           ;	WDTE = OFF, WDT disabled
   434                           ;	Power-up Timer Enable bit
   435                           ;	PWRTE = OFF, PWRT disabled
   436                           ;	Brown-out Reset Enable bit
   437                           ;	BOREN = OFF, BOR disabled
   438                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   439                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   440                           ;	Data EEPROM Memory Code Protection bit
   441                           ;	CPD = OFF, Data EEPROM code protection off
   442                           ;	Flash Program Memory Write Enable bits
   443                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   444                           ;	In-Circuit Debugger Mode bit
   445                           ;	DEBUG = 0x1, unprogrammed default
   446                           ;	Flash Program Memory Code Protection bit
   447                           ;	CP = OFF, Code protection off
   448     2007                     	org	8199
   449     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      3       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       5      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Oct 22 23:17:34 2024

                     l23 0056                       l24 0056                      l581 0046  
                    l583 0048                      l585 0049                      l577 003D  
                    l587 004C                      l579 0044                      l589 0052  
                    _ISR 0017                      _val 0073                     ?_ISR 0070  
                   _PIE1 008C                     i1l33 0034                     _PIR1 000C  
                   u1_20 001D                     u1_21 001C                     u2_20 002A  
                   u2_21 0029                     _main 003D                     btemp 007E  
                   start 000E                    ??_ISR 0070                    ?_main 0070  
                  _T1CON 0010                    i1l601 0030                    i1l591 0017  
                  i1l593 001D                    i1l595 0023                    i1l597 002A  
                  i1l599 002E                    _TMR1H 000F                    _TMR1L 000E  
                  _PORTB 0006                    _TRISB 0086                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0011  
           __end_of_main 005A                   ??_main 0073                   _INTCON 000B  
                 saved_w 007E  __end_of__initialization 0013           __pcstackCOMMON 0070  
             __pmaintext 003D               __pintentry 0004                  __ptext1 0017  
   end_of_initialization 0013      start_initialization 0011              __end_of_ISR 003D  
            __pbssCOMMON 0073                ___latbits 0002        interrupt_function 0004  
               intlevel1 0000  
