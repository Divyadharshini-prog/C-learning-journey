

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Jul 20 00:01:50 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172     0008                     _PORTD	set	8
   173     0007                     _PORTC	set	7
   174     0088                     _TRISD	set	136
   175     0087                     _TRISC	set	135
   176                           
   177                           	psect	cinit
   178     07F3                     start_initialization:	
   179                           ; #config settings
   180                           
   181     07F3                     __initialization:
   182                           
   183                           ; Clear objects allocated to BANK0
   184     07F3  1383               	bcf	3,7	;select IRP bank0
   185     07F4  3020               	movlw	low __pbssBANK0
   186     07F5  0084               	movwf	4
   187     07F6  303A               	movlw	low (__pbssBANK0+26)
   188     07F7  120A  118A  263E  120A  118A  	fcall	clear_ram0
   189     07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192     07FC                     __end_of__initialization:
   193     07FC  0183               	clrf	3
   194     07FD  120A  118A  2ECA   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	bssBANK0
   197     0020                     __pbssBANK0:
   198     0020                     _k:
   199     0020                     	ds	10
   200     002A                     _n:
   201     002A                     	ds	2
   202     002C                     _m:
   203     002C                     	ds	2
   204     002E                     _delaycount:
   205     002E                     	ds	2
   206     0030                     _sub:
   207     0030                     	ds	2
   208     0032                     _num2:
   209     0032                     	ds	2
   210     0034                     _num1:
   211     0034                     	ds	2
   212     0036                     _plus:
   213     0036                     	ds	1
   214     0037                     _minus:
   215     0037                     	ds	1
   216     0038                     _Equal:
   217     0038                     	ds	1
   218     0039                     _j:
   219     0039                     	ds	1
   220                           
   221                           	psect	clrtext
   222     063E                     clear_ram0:	
   223                           ;	Called with FSR containing the base address, and
   224                           ;	W with the last address+1
   225                           
   226     063E  0064               	clrwdt	;clear the watchdog before getting into this loop
   227     063F                     clrloop0:
   228     063F  0180               	clrf	0	;clear RAM location pointed to by FSR
   229     0640  0A84               	incf	4,f	;increment pointer
   230     0641  0604               	xorwf	4,w	;XOR with final address
   231     0642  1903               	btfsc	3,2	;have we reached the end yet?
   232     0643  3400               	retlw	0	;all done for this memory range, return
   233     0644  0604               	xorwf	4,w	;XOR again to restore value
   234     0645  2E3F               	goto	clrloop0	;do the next byte
   235                           
   236                           	psect	cstackCOMMON
   237     0070                     __pcstackCOMMON:
   238     0070                     ?_init:
   239     0070                     ?_Lcd_command:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ??_Lcd_command:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_Lcd_data:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ??_Lcd_data:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?___lwdiv:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ___lwdiv@divisor:	
   258                           ; 2 bytes @ 0x0
   259                           
   260                           
   261                           ; 2 bytes @ 0x0
   262     0070                     	ds	2
   263     0072                     Lcd_command@i:
   264     0072                     Lcd_data@i:	
   265                           ; 1 bytes @ 0x2
   266                           
   267     0072                     ___lwdiv@dividend:	
   268                           ; 1 bytes @ 0x2
   269                           
   270                           
   271                           ; 2 bytes @ 0x2
   272     0072                     	ds	1
   273     0073                     ??_init:
   274                           
   275                           ; 1 bytes @ 0x3
   276     0073                     	ds	1
   277     0074                     ??___lwdiv:
   278     0074                     ___lwdiv@quotient:	
   279                           ; 1 bytes @ 0x4
   280                           
   281                           
   282                           ; 2 bytes @ 0x4
   283     0074                     	ds	2
   284     0076                     ___lwdiv@counter:
   285                           
   286                           ; 1 bytes @ 0x6
   287     0076                     	ds	1
   288     0077                     ?___bmul:
   289     0077                     ___bmul@multiplicand:	
   290                           ; 1 bytes @ 0x7
   291                           
   292                           
   293                           ; 1 bytes @ 0x7
   294     0077                     	ds	1
   295     0078                     ??___bmul:
   296     0078                     ___bmul@product:	
   297                           ; 1 bytes @ 0x8
   298                           
   299                           
   300                           ; 1 bytes @ 0x8
   301     0078                     	ds	1
   302     0079                     ___bmul@multiplier:
   303                           
   304                           ; 1 bytes @ 0x9
   305     0079                     	ds	1
   306     007A                     ?_Lcd_output:
   307     007A                     Lcd_output@i:	
   308                           ; 1 bytes @ 0xA
   309                           
   310                           
   311                           ; 2 bytes @ 0xA
   312     007A                     	ds	2
   313     007C                     ??_Lcd_output:
   314     007C                     Lcd_output@s:	
   315                           ; 1 bytes @ 0xC
   316                           
   317                           
   318                           ; 1 bytes @ 0xC
   319     007C                     	ds	1
   320     007D                     Lcd_output@j:
   321                           
   322                           ; 1 bytes @ 0xD
   323     007D                     	ds	1
   324     007E                     ??_main:
   325                           
   326                           	psect	maintext
   327     06CA                     __pmaintext:	
   328                           ; 1 bytes @ 0xE
   329 ;;
   330 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   331 ;;
   332 ;; *************** function _main *****************
   333 ;; Defined at:
   334 ;;		line 33 in file "task4_lcd1.c"
   335 ;; Parameters:    Size  Location     Type
   336 ;;		None
   337 ;; Auto vars:     Size  Location     Type
   338 ;;		None
   339 ;; Return value:  Size  Location     Type
   340 ;;                  1    wreg      void 
   341 ;; Registers used:
   342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   343 ;; Tracked objects:
   344 ;;		On entry : B00/0
   345 ;;		On exit  : 0/0
   346 ;;		Unchanged: 0/0
   347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   348 ;;      Params:         0       0       0       0       0
   349 ;;      Locals:         0       0       0       0       0
   350 ;;      Temps:          0       0       0       0       0
   351 ;;      Totals:         0       0       0       0       0
   352 ;;Total ram usage:        0 bytes
   353 ;; Hardware stack levels required when called: 2
   354 ;; This function calls:
   355 ;;		_Lcd_command
   356 ;;		_Lcd_data
   357 ;;		_Lcd_output
   358 ;;		_init
   359 ;; This function is called by:
   360 ;;		Startup code after reset
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364     06CA                     _main:	
   365                           ;psect for function _main
   366                           
   367     06CA                     l893:	
   368                           ;incstack = 0
   369                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   370                           
   371                           
   372                           ;task4_lcd1.c: 35:     init();
   373     06CA  120A  118A  2723  120A  118A  	fcall	_init
   374     06CF                     l895:
   375                           
   376                           ;task4_lcd1.c: 36:     num1 = 200;
   377     06CF  30C8               	movlw	200
   378     06D0  1283               	bcf	3,5	;RP0=0, select bank0
   379     06D1  1303               	bcf	3,6	;RP1=0, select bank0
   380     06D2  00B4               	movwf	_num1
   381     06D3  3000               	movlw	0
   382     06D4  00B5               	movwf	_num1+1
   383     06D5                     l897:
   384                           
   385                           ;task4_lcd1.c: 37:     num2 = 600;
   386     06D5  3058               	movlw	88
   387     06D6  00B2               	movwf	_num2
   388     06D7  3002               	movlw	2
   389     06D8  00B3               	movwf	_num2+1
   390     06D9                     l899:
   391                           
   392                           ;task4_lcd1.c: 38:     Equal = '=';
   393     06D9  303D               	movlw	61
   394     06DA  00B8               	movwf	_Equal
   395     06DB                     l901:
   396                           
   397                           ;task4_lcd1.c: 39:     minus = '-';
   398     06DB  302D               	movlw	45
   399     06DC  00B7               	movwf	_minus
   400     06DD                     l903:
   401                           
   402                           ;task4_lcd1.c: 40:     plus = '+';
   403     06DD  302B               	movlw	43
   404     06DE  00B6               	movwf	_plus
   405     06DF                     l905:
   406                           
   407                           ;task4_lcd1.c: 42:     Lcd_command(0x80);
   408     06DF  3080               	movlw	128
   409     06E0  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   410     06E5                     l907:
   411                           
   412                           ;task4_lcd1.c: 43:     Lcd_output(num1);
   413     06E5  30C8               	movlw	200
   414     06E6  00FA               	movwf	Lcd_output@i
   415     06E7  3000               	movlw	0
   416     06E8  00FB               	movwf	Lcd_output@i+1
   417     06E9  120A  118A  278A  120A  118A  	fcall	_Lcd_output
   418     06EE                     l909:
   419                           
   420                           ;task4_lcd1.c: 44:     Lcd_data(minus);
   421     06EE  302D               	movlw	45
   422     06EF  120A  118A  2646  120A  118A  	fcall	_Lcd_data
   423     06F4                     l911:
   424                           
   425                           ;task4_lcd1.c: 45:     Lcd_output(num2);
   426     06F4  3058               	movlw	88
   427     06F5  00FA               	movwf	Lcd_output@i
   428     06F6  3002               	movlw	2
   429     06F7  00FB               	movwf	Lcd_output@i+1
   430     06F8  120A  118A  278A  120A  118A  	fcall	_Lcd_output
   431     06FD                     l913:
   432                           
   433                           ;task4_lcd1.c: 46:     Lcd_data(Equal);
   434     06FD  303D               	movlw	61
   435     06FE  120A  118A  2646  120A  118A  	fcall	_Lcd_data
   436     0703                     l915:
   437                           
   438                           ;task4_lcd1.c: 47:     sub = num1 - num2;
   439     0703  3070               	movlw	112
   440     0704  1283               	bcf	3,5	;RP0=0, select bank0
   441     0705  1303               	bcf	3,6	;RP1=0, select bank0
   442     0706  00B0               	movwf	_sub
   443     0707  30FE               	movlw	254
   444     0708  00B1               	movwf	_sub+1
   445     0709                     l923:
   446     0709                     l925:
   447                           
   448                           ;task4_lcd1.c: 55:     {;task4_lcd1.c: 56:     Lcd_data(minus);
   449     0709  302D               	movlw	45
   450     070A  120A  118A  2646  120A  118A  	fcall	_Lcd_data
   451     070F                     l927:
   452                           
   453                           ;task4_lcd1.c: 57:     sub = -sub;
   454     070F  1283               	bcf	3,5	;RP0=0, select bank0
   455     0710  1303               	bcf	3,6	;RP1=0, select bank0
   456     0711  09B0               	comf	_sub,f
   457     0712  09B1               	comf	_sub+1,f
   458     0713  0AB0               	incf	_sub,f
   459     0714  1903               	skipnz
   460     0715  0AB1               	incf	_sub+1,f
   461     0716                     l929:
   462                           
   463                           ;task4_lcd1.c: 59:     Lcd_output(sub);
   464     0716  0831               	movf	_sub+1,w
   465     0717  00FB               	movwf	Lcd_output@i+1
   466     0718  0830               	movf	_sub,w
   467     0719  00FA               	movwf	Lcd_output@i
   468     071A  120A  118A  278A  120A  118A  	fcall	_Lcd_output
   469     071F                     l48:	
   470                           ;task4_lcd1.c: 60:     while (1);
   471                           
   472     071F                     l49:
   473     071F  2F1F               	goto	l48
   474     0720  120A  118A  2800   	ljmp	start
   475     0723                     __end_of_main:
   476                           
   477                           	psect	text1
   478     0723                     __ptext1:	
   479 ;; *************** function _init *****************
   480 ;; Defined at:
   481 ;;		line 63 in file "task4_lcd1.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   495 ;;      Params:         0       0       0       0       0
   496 ;;      Locals:         0       0       0       0       0
   497 ;;      Temps:          2       0       0       0       0
   498 ;;      Totals:         2       0       0       0       0
   499 ;;Total ram usage:        2 bytes
   500 ;; Hardware stack levels used: 1
   501 ;; Hardware stack levels required when called: 1
   502 ;; This function calls:
   503 ;;		_Lcd_command
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509     0723                     _init:	
   510                           ;psect for function _init
   511                           
   512     0723                     l837:	
   513                           ;incstack = 0
   514                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   515                           
   516                           
   517                           ;task4_lcd1.c: 65:     TRISC = 0X00;
   518     0723  1683               	bsf	3,5	;RP0=1, select bank1
   519     0724  1303               	bcf	3,6	;RP1=0, select bank1
   520     0725  0187               	clrf	7	;volatile
   521                           
   522                           ;task4_lcd1.c: 66:     TRISD = 0X00;
   523     0726  0188               	clrf	8	;volatile
   524     0727                     l839:
   525                           
   526                           ;task4_lcd1.c: 67:     Lcd_command(0x38);
   527     0727  3038               	movlw	56
   528     0728  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   529     072D                     l841:
   530                           
   531                           ;task4_lcd1.c: 68:     _delay((unsigned long)((100)*(6000000/4000.0)));
   532     072D  30C3               	movlw	195
   533     072E  00F4               	movwf	??_init+1
   534     072F  30CD               	movlw	205
   535     0730  00F3               	movwf	??_init
   536     0731                     u247:
   537     0731  0BF3               	decfsz	??_init,f
   538     0732  2F31               	goto	u247
   539     0733  0BF4               	decfsz	??_init+1,f
   540     0734  2F31               	goto	u247
   541     0735                     l843:
   542                           
   543                           ;task4_lcd1.c: 69:     Lcd_command(0x38);
   544     0735  3038               	movlw	56
   545     0736  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   546     073B                     l845:
   547                           
   548                           ;task4_lcd1.c: 70:     _delay((unsigned long)((100)*(6000000/4000.0)));
   549     073B  30C3               	movlw	195
   550     073C  00F4               	movwf	??_init+1
   551     073D  30CD               	movlw	205
   552     073E  00F3               	movwf	??_init
   553     073F                     u257:
   554     073F  0BF3               	decfsz	??_init,f
   555     0740  2F3F               	goto	u257
   556     0741  0BF4               	decfsz	??_init+1,f
   557     0742  2F3F               	goto	u257
   558     0743                     l847:
   559                           
   560                           ;task4_lcd1.c: 71:     Lcd_command(0x38);
   561     0743  3038               	movlw	56
   562     0744  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   563     0749                     l849:
   564                           
   565                           ;task4_lcd1.c: 72:     _delay((unsigned long)((100)*(6000000/4000.0)));
   566     0749  30C3               	movlw	195
   567     074A  00F4               	movwf	??_init+1
   568     074B  30CD               	movlw	205
   569     074C  00F3               	movwf	??_init
   570     074D                     u267:
   571     074D  0BF3               	decfsz	??_init,f
   572     074E  2F4D               	goto	u267
   573     074F  0BF4               	decfsz	??_init+1,f
   574     0750  2F4D               	goto	u267
   575     0751                     l851:
   576                           
   577                           ;task4_lcd1.c: 73:     Lcd_command(0x38);
   578     0751  3038               	movlw	56
   579     0752  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   580     0757                     l853:
   581                           
   582                           ;task4_lcd1.c: 74:     _delay((unsigned long)((100)*(6000000/4000.0)));
   583     0757  30C3               	movlw	195
   584     0758  00F4               	movwf	??_init+1
   585     0759  30CD               	movlw	205
   586     075A  00F3               	movwf	??_init
   587     075B                     u277:
   588     075B  0BF3               	decfsz	??_init,f
   589     075C  2F5B               	goto	u277
   590     075D  0BF4               	decfsz	??_init+1,f
   591     075E  2F5B               	goto	u277
   592     075F                     l855:
   593                           
   594                           ;task4_lcd1.c: 75:     Lcd_command(0x06);
   595     075F  3006               	movlw	6
   596     0760  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   597     0765                     l857:
   598                           
   599                           ;task4_lcd1.c: 76:     _delay((unsigned long)((100)*(6000000/4000.0)));
   600     0765  30C3               	movlw	195
   601     0766  00F4               	movwf	??_init+1
   602     0767  30CD               	movlw	205
   603     0768  00F3               	movwf	??_init
   604     0769                     u287:
   605     0769  0BF3               	decfsz	??_init,f
   606     076A  2F69               	goto	u287
   607     076B  0BF4               	decfsz	??_init+1,f
   608     076C  2F69               	goto	u287
   609     076D                     l859:
   610                           
   611                           ;task4_lcd1.c: 77:     Lcd_command(0x0C);
   612     076D  300C               	movlw	12
   613     076E  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   614     0773                     l861:
   615                           
   616                           ;task4_lcd1.c: 78:     _delay((unsigned long)((100)*(6000000/4000.0)));
   617     0773  30C3               	movlw	195
   618     0774  00F4               	movwf	??_init+1
   619     0775  30CD               	movlw	205
   620     0776  00F3               	movwf	??_init
   621     0777                     u297:
   622     0777  0BF3               	decfsz	??_init,f
   623     0778  2F77               	goto	u297
   624     0779  0BF4               	decfsz	??_init+1,f
   625     077A  2F77               	goto	u297
   626     077B                     l863:
   627                           
   628                           ;task4_lcd1.c: 79:     Lcd_command(0x01);
   629     077B  3001               	movlw	1
   630     077C  120A  118A  266F  120A  118A  	fcall	_Lcd_command
   631     0781                     l865:
   632                           
   633                           ;task4_lcd1.c: 80:     _delay((unsigned long)((100)*(6000000/4000.0)));
   634     0781  30C3               	movlw	195
   635     0782  00F4               	movwf	??_init+1
   636     0783  30CD               	movlw	205
   637     0784  00F3               	movwf	??_init
   638     0785                     u307:
   639     0785  0BF3               	decfsz	??_init,f
   640     0786  2F85               	goto	u307
   641     0787  0BF4               	decfsz	??_init+1,f
   642     0788  2F85               	goto	u307
   643     0789                     l54:
   644     0789  0008               	return
   645     078A                     __end_of_init:
   646                           
   647                           	psect	text2
   648     066F                     __ptext2:	
   649 ;; *************** function _Lcd_command *****************
   650 ;; Defined at:
   651 ;;		line 105 in file "task4_lcd1.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  i               1    wreg     unsigned char 
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  i               1    2[COMMON] unsigned char 
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, btemp+1
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   665 ;;      Params:         0       0       0       0       0
   666 ;;      Locals:         1       0       0       0       0
   667 ;;      Temps:          2       0       0       0       0
   668 ;;      Totals:         3       0       0       0       0
   669 ;;Total ram usage:        3 bytes
   670 ;; Hardware stack levels used: 1
   671 ;; This function calls:
   672 ;;		Nothing
   673 ;; This function is called by:
   674 ;;		_main
   675 ;;		_init
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679     066F                     _Lcd_command:	
   680                           ;psect for function _Lcd_command
   681                           
   682                           
   683                           ;incstack = 0
   684                           ; Regs used in _Lcd_command: [wreg+status,2+status,0+btemp+1]
   685                           ;Lcd_command@i stored from wreg
   686     066F  00F2               	movwf	Lcd_command@i
   687     0670                     l777:
   688                           
   689                           ;task4_lcd1.c: 105: void Lcd_command(unsigned char i);task4_lcd1.c: 106: {;task4_lcd1.c:
      +                           107:     PORTC &= ~0X08;
   690     0670  30F7               	movlw	247
   691     0671  00FF               	movwf	btemp+1
   692     0672  087F               	movf	btemp+1,w
   693     0673  1283               	bcf	3,5	;RP0=0, select bank0
   694     0674  1303               	bcf	3,6	;RP1=0, select bank0
   695     0675  0587               	andwf	7,f	;volatile
   696     0676                     l779:
   697                           
   698                           ;task4_lcd1.c: 108:     PORTD = i;
   699     0676  0872               	movf	Lcd_command@i,w
   700     0677  0088               	movwf	8	;volatile
   701     0678                     l781:
   702                           
   703                           ;task4_lcd1.c: 109:     PORTC |= 0X01;
   704     0678  1407               	bsf	7,0	;volatile
   705     0679                     l783:
   706                           
   707                           ;task4_lcd1.c: 110:     PORTC &= ~0X01;
   708     0679  30FE               	movlw	254
   709     067A  00FF               	movwf	btemp+1
   710     067B  087F               	movf	btemp+1,w
   711     067C  0587               	andwf	7,f	;volatile
   712                           
   713                           ;task4_lcd1.c: 111:     _delay((unsigned long)((100)*(6000000/4000.0)));
   714     067D  30C3               	movlw	195
   715     067E  00F1               	movwf	??_Lcd_command+1
   716     067F  30CD               	movlw	205
   717     0680  00F0               	movwf	??_Lcd_command
   718     0681                     u317:
   719     0681  0BF0               	decfsz	??_Lcd_command,f
   720     0682  2E81               	goto	u317
   721     0683  0BF1               	decfsz	??_Lcd_command+1,f
   722     0684  2E81               	goto	u317
   723     0685                     l66:
   724     0685  0008               	return
   725     0686                     __end_of_Lcd_command:
   726                           
   727                           	psect	text3
   728     078A                     __ptext3:	
   729 ;; *************** function _Lcd_output *****************
   730 ;; Defined at:
   731 ;;		line 83 in file "task4_lcd1.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  i               2   10[COMMON] unsigned int 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  j               1   13[COMMON] unsigned char 
   736 ;;  s               1   12[COMMON] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         2       0       0       0       0
   747 ;;      Locals:         2       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0
   749 ;;      Totals:         4       0       0       0       0
   750 ;;Total ram usage:        4 bytes
   751 ;; Hardware stack levels used: 1
   752 ;; Hardware stack levels required when called: 1
   753 ;; This function calls:
   754 ;;		_Lcd_data
   755 ;;		___bmul
   756 ;;		___lwdiv
   757 ;; This function is called by:
   758 ;;		_main
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762     078A                     _Lcd_output:	
   763                           ;psect for function _Lcd_output
   764                           
   765     078A                     l867:	
   766                           ;incstack = 0
   767                           ; Regs used in _Lcd_output: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   768                           
   769                           
   770                           ;task4_lcd1.c: 83: void Lcd_output(unsigned int i);task4_lcd1.c: 84: {;task4_lcd1.c: 85:
      +                               unsigned char s, j = 1;
   771     078A  01FD               	clrf	Lcd_output@j
   772     078B  0AFD               	incf	Lcd_output@j,f
   773     078C                     l869:
   774                           
   775                           ;task4_lcd1.c: 86:     m = i;
   776     078C  087B               	movf	Lcd_output@i+1,w
   777     078D  1283               	bcf	3,5	;RP0=0, select bank0
   778     078E  1303               	bcf	3,6	;RP1=0, select bank0
   779     078F  00AD               	movwf	_m+1
   780     0790  087A               	movf	Lcd_output@i,w
   781     0791  00AC               	movwf	_m
   782                           
   783                           ;task4_lcd1.c: 87:     while (m != 0)
   784     0792  2FC9               	goto	l879
   785     0793                     l871:
   786                           
   787                           ;task4_lcd1.c: 88:     {;task4_lcd1.c: 89:         s = m - ((m / 10) * 10);
   788     0793  30F6               	movlw	246
   789     0794  00F7               	movwf	___bmul@multiplicand
   790     0795  082D               	movf	_m+1,w
   791     0796  00F3               	movwf	___lwdiv@dividend+1
   792     0797  082C               	movf	_m,w
   793     0798  00F2               	movwf	___lwdiv@dividend
   794     0799  300A               	movlw	10
   795     079A  00F0               	movwf	___lwdiv@divisor
   796     079B  3000               	movlw	0
   797     079C  00F1               	movwf	___lwdiv@divisor+1
   798     079D  120A  118A  2686  120A  118A  	fcall	___lwdiv
   799     07A2  0870               	movf	?___lwdiv,w
   800     07A3  120A  118A  265A  120A  118A  	fcall	___bmul
   801     07A8  1283               	bcf	3,5	;RP0=0, select bank0
   802     07A9  1303               	bcf	3,6	;RP1=0, select bank0
   803     07AA  072C               	addwf	_m,w
   804     07AB  00FC               	movwf	Lcd_output@s
   805     07AC                     l873:
   806                           
   807                           ;task4_lcd1.c: 90:         k[j] = s;
   808     07AC  087D               	movf	Lcd_output@j,w
   809     07AD  3E20               	addlw	(low (_k| 0))& (0+255)
   810     07AE  0084               	movwf	4
   811     07AF  087C               	movf	Lcd_output@s,w
   812     07B0  1383               	bcf	3,7	;select IRP bank0
   813     07B1  0080               	movwf	0
   814     07B2                     l875:
   815                           
   816                           ;task4_lcd1.c: 91:         j++;
   817     07B2  3001               	movlw	1
   818     07B3  00FF               	movwf	btemp+1
   819     07B4  087F               	movf	btemp+1,w
   820     07B5  07FD               	addwf	Lcd_output@j,f
   821     07B6                     l877:
   822                           
   823                           ;task4_lcd1.c: 92:         m = m / 10;
   824     07B6  300A               	movlw	10
   825     07B7  00F0               	movwf	___lwdiv@divisor
   826     07B8  3000               	movlw	0
   827     07B9  00F1               	movwf	___lwdiv@divisor+1
   828     07BA  082D               	movf	_m+1,w
   829     07BB  00F3               	movwf	___lwdiv@dividend+1
   830     07BC  082C               	movf	_m,w
   831     07BD  00F2               	movwf	___lwdiv@dividend
   832     07BE  120A  118A  2686  120A  118A  	fcall	___lwdiv
   833     07C3  0871               	movf	?___lwdiv+1,w
   834     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   835     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   836     07C6  00AD               	movwf	_m+1
   837     07C7  0870               	movf	?___lwdiv,w
   838     07C8  00AC               	movwf	_m
   839     07C9                     l879:
   840                           
   841                           ;task4_lcd1.c: 87:     while (m != 0)
   842     07C9  082C               	movf	_m,w
   843     07CA  042D               	iorwf	_m+1,w
   844     07CB  1D03               	btfss	3,2
   845     07CC  2FCE               	goto	u221
   846     07CD  2FCF               	goto	u220
   847     07CE                     u221:
   848     07CE  2F93               	goto	l871
   849     07CF                     u220:
   850     07CF                     l881:
   851                           
   852                           ;task4_lcd1.c: 95:     k[j] = '\0';
   853     07CF  087D               	movf	Lcd_output@j,w
   854     07D0  3E20               	addlw	(low (_k| 0))& (0+255)
   855     07D1  0084               	movwf	4
   856     07D2  1383               	bcf	3,7	;select IRP bank0
   857     07D3  0180               	clrf	0
   858     07D4                     l883:
   859                           
   860                           ;task4_lcd1.c: 96:     j = j - 1;
   861     07D4  087D               	movf	Lcd_output@j,w
   862     07D5  3EFF               	addlw	255
   863     07D6  00FD               	movwf	Lcd_output@j
   864                           
   865                           ;task4_lcd1.c: 97:     while (j != 0)
   866     07D7  2FED               	goto	l891
   867     07D8                     l885:
   868                           
   869                           ;task4_lcd1.c: 98:     {;task4_lcd1.c: 99:         n = 0x30 + k[j];
   870     07D8  087D               	movf	Lcd_output@j,w
   871     07D9  3E20               	addlw	(low (_k| 0))& (0+255)
   872     07DA  0084               	movwf	4
   873     07DB  1383               	bcf	3,7	;select IRP bank0
   874     07DC  0800               	movf	0,w
   875     07DD  3E30               	addlw	48
   876     07DE  1283               	bcf	3,5	;RP0=0, select bank0
   877     07DF  1303               	bcf	3,6	;RP1=0, select bank0
   878     07E0  00AA               	movwf	_n
   879     07E1  3000               	movlw	0
   880     07E2  1803               	skipnc
   881     07E3  3001               	movlw	1
   882     07E4  00AB               	movwf	_n+1
   883     07E5                     l887:
   884                           
   885                           ;task4_lcd1.c: 100:         Lcd_data(n);
   886     07E5  082A               	movf	_n,w
   887     07E6  120A  118A  2646  120A  118A  	fcall	_Lcd_data
   888     07EB                     l889:
   889                           
   890                           ;task4_lcd1.c: 101:         j--;
   891     07EB  3001               	movlw	1
   892     07EC  02FD               	subwf	Lcd_output@j,f
   893     07ED                     l891:
   894                           
   895                           ;task4_lcd1.c: 97:     while (j != 0)
   896     07ED  087D               	movf	Lcd_output@j,w
   897     07EE  1D03               	btfss	3,2
   898     07EF  2FF1               	goto	u231
   899     07F0  2FF2               	goto	u230
   900     07F1                     u231:
   901     07F1  2FD8               	goto	l885
   902     07F2                     u230:
   903     07F2                     l63:
   904     07F2  0008               	return
   905     07F3                     __end_of_Lcd_output:
   906                           
   907                           	psect	text4
   908     0686                     __ptext4:	
   909 ;; *************** function ___lwdiv *****************
   910 ;; Defined at:
   911 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\lwdiv.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  divisor         2    0[COMMON] unsigned int 
   914 ;;  dividend        2    2[COMMON] unsigned int 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  quotient        2    4[COMMON] unsigned int 
   917 ;;  counter         1    6[COMMON] unsigned char 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  2    0[COMMON] unsigned int 
   920 ;; Registers used:
   921 ;;		wreg, status,2, status,0, btemp+1
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   927 ;;      Params:         4       0       0       0       0
   928 ;;      Locals:         3       0       0       0       0
   929 ;;      Temps:          0       0       0       0       0
   930 ;;      Totals:         7       0       0       0       0
   931 ;;Total ram usage:        7 bytes
   932 ;; Hardware stack levels used: 1
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_Lcd_output
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940     0686                     ___lwdiv:	
   941                           ;psect for function ___lwdiv
   942                           
   943     0686                     l811:	
   944                           ;incstack = 0
   945                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   946                           
   947     0686  01F4               	clrf	___lwdiv@quotient
   948     0687  01F5               	clrf	___lwdiv@quotient+1
   949     0688                     l813:
   950     0688  0870               	movf	___lwdiv@divisor,w
   951     0689  0471               	iorwf	___lwdiv@divisor+1,w
   952     068A  1903               	btfsc	3,2
   953     068B  2E8D               	goto	u151
   954     068C  2E8E               	goto	u150
   955     068D                     u151:
   956     068D  2EC5               	goto	l833
   957     068E                     u150:
   958     068E                     l815:
   959     068E  01F6               	clrf	___lwdiv@counter
   960     068F  0AF6               	incf	___lwdiv@counter,f
   961     0690  2E9C               	goto	l821
   962     0691                     l817:
   963     0691  3001               	movlw	1
   964     0692                     u165:
   965     0692  1003               	clrc
   966     0693  0DF0               	rlf	___lwdiv@divisor,f
   967     0694  0DF1               	rlf	___lwdiv@divisor+1,f
   968     0695  3EFF               	addlw	-1
   969     0696  1D03               	skipz
   970     0697  2E92               	goto	u165
   971     0698                     l819:
   972     0698  3001               	movlw	1
   973     0699  00FF               	movwf	btemp+1
   974     069A  087F               	movf	btemp+1,w
   975     069B  07F6               	addwf	___lwdiv@counter,f
   976     069C                     l821:
   977     069C  1FF1               	btfss	___lwdiv@divisor+1,7
   978     069D  2E9F               	goto	u171
   979     069E  2EA0               	goto	u170
   980     069F                     u171:
   981     069F  2E91               	goto	l817
   982     06A0                     u170:
   983     06A0                     l823:
   984     06A0  3001               	movlw	1
   985     06A1                     u185:
   986     06A1  1003               	clrc
   987     06A2  0DF4               	rlf	___lwdiv@quotient,f
   988     06A3  0DF5               	rlf	___lwdiv@quotient+1,f
   989     06A4  3EFF               	addlw	-1
   990     06A5  1D03               	skipz
   991     06A6  2EA1               	goto	u185
   992     06A7  0871               	movf	___lwdiv@divisor+1,w
   993     06A8  0273               	subwf	___lwdiv@dividend+1,w
   994     06A9  1D03               	skipz
   995     06AA  2EAD               	goto	u195
   996     06AB  0870               	movf	___lwdiv@divisor,w
   997     06AC  0272               	subwf	___lwdiv@dividend,w
   998     06AD                     u195:
   999     06AD  1C03               	skipc
  1000     06AE  2EB0               	goto	u191
  1001     06AF  2EB1               	goto	u190
  1002     06B0                     u191:
  1003     06B0  2EB8               	goto	l829
  1004     06B1                     u190:
  1005     06B1                     l825:
  1006     06B1  0870               	movf	___lwdiv@divisor,w
  1007     06B2  02F2               	subwf	___lwdiv@dividend,f
  1008     06B3  0871               	movf	___lwdiv@divisor+1,w
  1009     06B4  1C03               	skipc
  1010     06B5  03F3               	decf	___lwdiv@dividend+1,f
  1011     06B6  02F3               	subwf	___lwdiv@dividend+1,f
  1012     06B7                     l827:
  1013     06B7  1474               	bsf	___lwdiv@quotient,0
  1014     06B8                     l829:
  1015     06B8  3001               	movlw	1
  1016     06B9                     u205:
  1017     06B9  1003               	clrc
  1018     06BA  0CF1               	rrf	___lwdiv@divisor+1,f
  1019     06BB  0CF0               	rrf	___lwdiv@divisor,f
  1020     06BC  3EFF               	addlw	-1
  1021     06BD  1D03               	skipz
  1022     06BE  2EB9               	goto	u205
  1023     06BF                     l831:
  1024     06BF  3001               	movlw	1
  1025     06C0  02F6               	subwf	___lwdiv@counter,f
  1026     06C1  1D03               	btfss	3,2
  1027     06C2  2EC4               	goto	u211
  1028     06C3  2EC5               	goto	u210
  1029     06C4                     u211:
  1030     06C4  2EA0               	goto	l823
  1031     06C5                     u210:
  1032     06C5                     l833:
  1033     06C5  0875               	movf	___lwdiv@quotient+1,w
  1034     06C6  00F1               	movwf	?___lwdiv+1
  1035     06C7  0874               	movf	___lwdiv@quotient,w
  1036     06C8  00F0               	movwf	?___lwdiv
  1037     06C9                     l441:
  1038     06C9  0008               	return
  1039     06CA                     __end_of___lwdiv:
  1040                           
  1041                           	psect	text5
  1042     065A                     __ptext5:	
  1043 ;; *************** function ___bmul *****************
  1044 ;; Defined at:
  1045 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  multiplier      1    wreg     unsigned char 
  1048 ;;  multiplicand    1    7[COMMON] unsigned char 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  multiplier      1    9[COMMON] unsigned char 
  1051 ;;  product         1    8[COMMON] unsigned char 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      unsigned char 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, btemp+1
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1061 ;;      Params:         1       0       0       0       0
  1062 ;;      Locals:         2       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0
  1064 ;;      Totals:         3       0       0       0       0
  1065 ;;Total ram usage:        3 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_Lcd_output
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074     065A                     ___bmul:	
  1075                           ;psect for function ___bmul
  1076                           
  1077                           
  1078                           ;incstack = 0
  1079                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1080                           ;___bmul@multiplier stored from wreg
  1081     065A  00F9               	movwf	___bmul@multiplier
  1082     065B                     l795:
  1083     065B  01F8               	clrf	___bmul@product
  1084     065C                     l797:
  1085     065C  1C79               	btfss	___bmul@multiplier,0
  1086     065D  2E5F               	goto	u131
  1087     065E  2E60               	goto	u130
  1088     065F                     u131:
  1089     065F  2E64               	goto	l801
  1090     0660                     u130:
  1091     0660                     l799:
  1092     0660  0877               	movf	___bmul@multiplicand,w
  1093     0661  00FF               	movwf	btemp+1
  1094     0662  087F               	movf	btemp+1,w
  1095     0663  07F8               	addwf	___bmul@product,f
  1096     0664                     l801:
  1097     0664  1003               	clrc
  1098     0665  0DF7               	rlf	___bmul@multiplicand,f
  1099     0666                     l803:
  1100     0666  1003               	clrc
  1101     0667  0CF9               	rrf	___bmul@multiplier,f
  1102     0668                     l805:
  1103     0668  0879               	movf	___bmul@multiplier,w
  1104     0669  1D03               	btfss	3,2
  1105     066A  2E6C               	goto	u141
  1106     066B  2E6D               	goto	u140
  1107     066C                     u141:
  1108     066C  2E5C               	goto	l797
  1109     066D                     u140:
  1110     066D                     l807:
  1111     066D  0878               	movf	___bmul@product,w
  1112     066E                     l187:
  1113     066E  0008               	return
  1114     066F                     __end_of___bmul:
  1115                           
  1116                           	psect	text6
  1117     0646                     __ptext6:	
  1118 ;; *************** function _Lcd_data *****************
  1119 ;; Defined at:
  1120 ;;		line 114 in file "task4_lcd1.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  i               1    wreg     unsigned char 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  i               1    2[COMMON] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, btemp+1
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1134 ;;      Params:         0       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0
  1136 ;;      Temps:          2       0       0       0       0
  1137 ;;      Totals:         3       0       0       0       0
  1138 ;;Total ram usage:        3 bytes
  1139 ;; Hardware stack levels used: 1
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;;		_Lcd_output
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148     0646                     _Lcd_data:	
  1149                           ;psect for function _Lcd_data
  1150                           
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _Lcd_data: [wreg+status,2+status,0+btemp+1]
  1154                           ;Lcd_data@i stored from wreg
  1155     0646  00F2               	movwf	Lcd_data@i
  1156     0647                     l785:
  1157                           
  1158                           ;task4_lcd1.c: 114: void Lcd_data(unsigned char i);task4_lcd1.c: 115: {;task4_lcd1.c: 11
      +                          6:     PORTC |= 0X08;
  1159     0647  1283               	bcf	3,5	;RP0=0, select bank0
  1160     0648  1303               	bcf	3,6	;RP1=0, select bank0
  1161     0649  1587               	bsf	7,3	;volatile
  1162     064A                     l787:
  1163                           
  1164                           ;task4_lcd1.c: 117:     PORTD = i;
  1165     064A  0872               	movf	Lcd_data@i,w
  1166     064B  0088               	movwf	8	;volatile
  1167     064C                     l789:
  1168                           
  1169                           ;task4_lcd1.c: 118:     PORTC |= 0X01;
  1170     064C  1407               	bsf	7,0	;volatile
  1171     064D                     l791:
  1172                           
  1173                           ;task4_lcd1.c: 119:     PORTC &= ~0X01;
  1174     064D  30FE               	movlw	254
  1175     064E  00FF               	movwf	btemp+1
  1176     064F  087F               	movf	btemp+1,w
  1177     0650  0587               	andwf	7,f	;volatile
  1178     0651                     l793:
  1179                           
  1180                           ;task4_lcd1.c: 120:     _delay((unsigned long)((100)*(6000000/4000.0)));
  1181     0651  30C3               	movlw	195
  1182     0652  00F1               	movwf	??_Lcd_data+1
  1183     0653  30CD               	movlw	205
  1184     0654  00F0               	movwf	??_Lcd_data
  1185     0655                     u327:
  1186     0655  0BF0               	decfsz	??_Lcd_data,f
  1187     0656  2E55               	goto	u327
  1188     0657  0BF1               	decfsz	??_Lcd_data+1,f
  1189     0658  2E55               	goto	u327
  1190     0659                     l69:
  1191     0659  0008               	return
  1192     065A                     __end_of_Lcd_data:
  1193     007E                     btemp	set	126	;btemp
  1194     007E                     wtemp0	set	126
  1195                           
  1196                           	psect	config
  1197                           
  1198                           ;Config register CONFIG @ 0x2007
  1199                           ;	Oscillator Selection bits
  1200                           ;	FOSC = EXTRC, RC oscillator
  1201                           ;	Watchdog Timer Enable bit
  1202                           ;	WDTE = OFF, WDT disabled
  1203                           ;	Power-up Timer Enable bit
  1204                           ;	PWRTE = OFF, PWRT disabled
  1205                           ;	Brown-out Reset Enable bit
  1206                           ;	BOREN = OFF, BOR disabled
  1207                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1208                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1209                           ;	Data EEPROM Memory Code Protection bit
  1210                           ;	CPD = OFF, Data EEPROM code protection off
  1211                           ;	Flash Program Memory Write Enable bits
  1212                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1213                           ;	In-Circuit Debugger Mode bit
  1214                           ;	DEBUG = 0x1, unprogrammed default
  1215                           ;	Flash Program Memory Code Protection bit
  1216                           ;	CP = OFF, Code protection off
  1217     2007                     	org	8199
  1218     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Lcd_output
    _init->_Lcd_command
    _Lcd_output->___bmul
    ___bmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1109
                        _Lcd_command
                           _Lcd_data
                         _Lcd_output
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _Lcd_command
 ---------------------------------------------------------------------------------
 (2) _Lcd_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_output                                           4     2      2    1043
                                             10 COMMON     4     2      2
                           _Lcd_data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_command
   _Lcd_data
   _Lcd_output
     _Lcd_data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv
   _init
     _Lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Jul 20 00:01:50 2024

                      _j 0039                        _k 0020                        _m 002C  
                      _n 002A           ___bmul@product 0078                       l54 0789  
                     l63 07F2                       l48 071F                       l49 071F  
                     l66 0685                       l69 0659                       fsr 0004  
                    l441 06C9                      l187 066E                      l801 0664  
                    l803 0666                      l811 0686                      l805 0668  
                    l821 069C                      l813 0688                      l901 06DB  
                    l807 066D                      l831 06BF                      l823 06A0  
                    l815 068E                      l911 06F4                      l903 06DD  
                    l825 06B1                      l817 0691                      l833 06C5  
                    l841 072D                      l913 06FD                      l905 06DF  
                    l827 06B7                      l819 0698                      l851 0751  
                    l843 0735                      l923 0709                      l915 0703  
                    l907 06E5                      l829 06B8                      l781 0678  
                    l861 0773                      l853 0757                      l845 073B  
                    l837 0723                      l925 0709                      l909 06EE  
                    l791 064D                      l871 0793                      l783 0679  
                    l863 077B                      l855 075F                      l847 0743  
                    l839 0727                      l927 070F                      l793 0651  
                    l785 0647                      l881 07CF                      l873 07AC  
                    l777 0670                      l865 0781                      l857 0765  
                    l849 0749                      l929 0716                      l787 064A  
                    l795 065B                      l891 07ED                      l883 07D4  
                    l875 07B2                      l867 078A                      l779 0676  
                    l859 076D                      l789 064C                      l797 065C  
                    l885 07D8                      l877 07B6                      l869 078C  
                    l893 06CA                      l799 0660                      l887 07E5  
                    l879 07C9                      l895 06CF                      l889 07EB  
                    l897 06D5                      l899 06D9                      u130 0660  
                    u210 06C5                      u131 065F                      u211 06C4  
                    u140 066D                      u220 07CF                      u141 066C  
                    u205 06B9                      u221 07CE                      u150 068E  
                    u230 07F2                      u151 068D                      u231 07F1  
                    u170 06A0                      u171 069F                      u307 0785  
                    u165 0692                      u317 0681                      u190 06B1  
                    u327 0655                      u191 06B0                      u247 0731  
                    u185 06A1                      u257 073F                      u195 06AD  
                    u267 074D                      u277 075B                      u287 0769  
                    u297 0777                      _sub 0030                      fsr0 0004  
                    indf 0000                     _main 06CA                     _init 0723  
                   _num1 0034                     _num2 0032                     _plus 0036  
                   btemp 007E                     start 0000        ___bmul@multiplier 0079  
    __end_of_Lcd_command 0686                    ?_main 0070                    ?_init 0070  
        __end_of___lwdiv 06CA                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _Equal 0038  
             _Lcd_output 078A                    _minus 0037                    status 0003  
                  wtemp0 007E         __end_of_Lcd_data 065A          __initialization 07F3  
           __end_of_main 0723             __end_of_init 078A                   ??_main 007E  
                 ??_init 0073              _Lcd_command 066F                   ___bmul 065A  
              ??___lwdiv 0074              ?_Lcd_output 007A  __end_of__initialization 07FC  
    ___bmul@multiplicand 0077           __pcstackCOMMON 0070                ?_Lcd_data 0070  
             __pbssBANK0 0020               _delaycount 002E               __pmaintext 06CA  
                ?___bmul 0077               ??_Lcd_data 0070                  ___lwdiv 0686  
                __ptext1 0723                  __ptext2 066F                  __ptext3 078A  
                __ptext4 0686                  __ptext5 065A                  __ptext6 0646  
                clrloop0 063F     end_of_initialization 07FC             ?_Lcd_command 0070  
              Lcd_data@i 0072             ??_Lcd_output 007C           __end_of___bmul 066F  
     __end_of_Lcd_output 07F3      start_initialization 07F3                 ??___bmul 0078  
              ___latbits 0002         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
       ___lwdiv@quotient 0074                clear_ram0 063E                 _Lcd_data 0646  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076             Lcd_command@i 0072  
            Lcd_output@i 007A              Lcd_output@j 007D              Lcd_output@s 007C  
          ??_Lcd_command 0070  
