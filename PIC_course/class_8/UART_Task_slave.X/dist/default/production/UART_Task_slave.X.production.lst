

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Oct 09 01:44:54 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173                           
   174                           	psect	idataBANK0
   175     06E7                     __pidataBANK0:
   176                           
   177                           ;initializer for _lcd_tx_str
   178     06E7  3454               	retlw	84
   179     06E8  3458               	retlw	88
   180     06E9  3420               	retlw	32
   181     06EA  3464               	retlw	100
   182     06EB  3461               	retlw	97
   183     06EC  3474               	retlw	116
   184     06ED  3461               	retlw	97
   185     06EE  343A               	retlw	58
   186     06EF  3420               	retlw	32
   187     06F0  3400               	retlw	0
   188                           
   189                           ;initializer for _lcd_rx_str
   190     06F1  3452               	retlw	82
   191     06F2  3458               	retlw	88
   192     06F3  3420               	retlw	32
   193     06F4  3464               	retlw	100
   194     06F5  3461               	retlw	97
   195     06F6  3474               	retlw	116
   196     06F7  3461               	retlw	97
   197     06F8  343A               	retlw	58
   198     06F9  3420               	retlw	32
   199     06FA  3400               	retlw	0
   200     0008                     _PORTD	set	8
   201     0007                     _PORTC	set	7
   202     0018                     _RCSTA	set	24
   203     0019                     _TXREG	set	25
   204     001A                     _RCREG	set	26
   205     000C                     _PIR1	set	12
   206     0099                     _SPBRG	set	153
   207     0098                     _TXSTA	set	152
   208     0087                     _TRISC	set	135
   209     0081                     _OPTION_REG	set	129
   210     0088                     _TRISD	set	136
   211                           
   212                           	psect	cinit
   213     07EC                     start_initialization:	
   214                           ; #config settings
   215                           
   216     07EC                     __initialization:
   217                           
   218                           ; Initialize objects allocated to BANK0
   219     07EC  1383               	bcf	3,7	;select IRP bank0
   220     07ED  3034               	movlw	low (__pdataBANK0+20)
   221     07EE  00FD               	movwf	btemp+-1
   222     07EF  3006               	movlw	high __pidataBANK0
   223     07F0  00FE               	movwf	btemp
   224     07F1  30E7               	movlw	low __pidataBANK0
   225     07F2  00FF               	movwf	btemp+1
   226     07F3  3020               	movlw	low __pdataBANK0
   227     07F4  0084               	movwf	4
   228     07F5  120A  118A  26B0  120A  118A  	fcall	init_ram0
   229                           
   230                           ; Clear objects allocated to COMMON
   231     07FA  01F7               	clrf	__pbssCOMMON& (0+127)
   232     07FB  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2F6B   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241     0077                     __pbssCOMMON:
   242     0077                     _Tx_data:
   243     0077                     	ds	1
   244     0078                     _Rx_buf:
   245     0078                     	ds	1
   246                           
   247                           	psect	dataBANK0
   248     0020                     __pdataBANK0:
   249     0020                     _lcd_tx_str:
   250     0020                     	ds	10
   251     002A                     _lcd_rx_str:
   252     002A                     	ds	10
   253                           
   254                           	psect	inittext
   255     06AC                     init_fetch0:	
   256                           ;	Called with low address in FSR and high address in W
   257                           
   258     06AC  087E               	movf	btemp,w
   259     06AD  008A               	movwf	10
   260     06AE  087F               	movf	btemp+1,w
   261     06AF  0082               	movwf	2
   262     06B0                     init_ram0:	
   263                           ;Called with:
   264                           ;	high address of idata address in btemp 
   265                           ;	low address of idata address in btemp+1 
   266                           ;	low address of data in FSR
   267                           ;	high address + 1 of data in btemp-1
   268                           
   269     06B0  120A  118A  26AC  120A  118A  	fcall	init_fetch0
   270     06B5  0080               	movwf	0
   271     06B6  0A84               	incf	4,f
   272     06B7  0804               	movf	4,w
   273     06B8  067D               	xorwf	btemp+-1,w
   274     06B9  1903               	btfsc	3,2
   275     06BA  3400               	retlw	0
   276     06BB  0AFF               	incf	btemp+1,f
   277     06BC  1903               	btfsc	3,2
   278     06BD  0AFE               	incf	btemp,f
   279     06BE  2EB0               	goto	init_ram0
   280                           
   281                           	psect	cstackCOMMON
   282     0070                     __pcstackCOMMON:
   283     0070                     ?_init:
   284     0070                     ??_init:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_lcd_init:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_lcd_cmd:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ??_lcd_cmd:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?_lcd_print_characters:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     ?_lcd_data:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ??_lcd_data:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ?_main:	
   306                           ; 1 bytes @ 0x0
   307                           
   308                           
   309                           ; 1 bytes @ 0x0
   310     0070                     	ds	2
   311     0072                     lcd_cmd@i:
   312     0072                     lcd_data@i:	
   313                           ; 1 bytes @ 0x2
   314                           
   315                           
   316                           ; 1 bytes @ 0x2
   317     0072                     	ds	1
   318     0073                     ??_lcd_init:
   319     0073                     ??_lcd_print_characters:	
   320                           ; 1 bytes @ 0x3
   321                           
   322     0073                     lcd_print_characters@type:	
   323                           ; 1 bytes @ 0x3
   324                           
   325                           
   326                           ; 1 bytes @ 0x3
   327     0073                     	ds	1
   328     0074                     lcd_print_characters@i:
   329                           
   330                           ; 1 bytes @ 0x4
   331     0074                     	ds	1
   332     0075                     ??_main:
   333                           
   334                           ; 1 bytes @ 0x5
   335     0075                     	ds	2
   336                           
   337                           	psect	maintext
   338     076B                     __pmaintext:	
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 26 in file "UART_Task_slave.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;		None
   349 ;; Return value:  Size  Location     Type
   350 ;;                  1    wreg      void 
   351 ;; Registers used:
   352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : B00/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   358 ;;      Params:         0       0       0       0       0
   359 ;;      Locals:         0       0       0       0       0
   360 ;;      Temps:          2       0       0       0       0
   361 ;;      Totals:         2       0       0       0       0
   362 ;;Total ram usage:        2 bytes
   363 ;; Hardware stack levels required when called: 2
   364 ;; This function calls:
   365 ;;		_init
   366 ;;		_lcd_cmd
   367 ;;		_lcd_data
   368 ;;		_lcd_init
   369 ;;		_lcd_print_characters
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375     076B                     _main:	
   376                           ;psect for function _main
   377                           
   378     076B                     l758:	
   379                           ;incstack = 0
   380                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   381                           
   382                           
   383                           ;UART_Task_slave.c: 27:     init();
   384     076B  120A  118A  26BF  120A  118A  	fcall	_init
   385                           
   386                           ;UART_Task_slave.c: 28:     lcd_init();
   387     0770  120A  118A  2712  120A  118A  	fcall	_lcd_init
   388     0775                     l760:
   389                           
   390                           ;UART_Task_slave.c: 32:         if (PIR1 & 0x20) {
   391     0775  1283               	bcf	3,5	;RP0=0, select bank0
   392     0776  1303               	bcf	3,6	;RP1=0, select bank0
   393     0777  1E8C               	btfss	12,5	;volatile
   394     0778  2F7A               	goto	u101
   395     0779  2F7B               	goto	u100
   396     077A                     u101:
   397     077A  2F75               	goto	l760
   398     077B                     u100:
   399     077B                     l762:
   400                           
   401                           ;UART_Task_slave.c: 33:             Rx_buf = RCREG;
   402     077B  081A               	movf	26,w	;volatile
   403     077C  00F8               	movwf	_Rx_buf
   404                           
   405                           ;UART_Task_slave.c: 36:             switch (Rx_buf) {
   406     077D  2FB6               	goto	l774
   407     077E                     l764:
   408                           
   409                           ;UART_Task_slave.c: 38:                     Tx_data = 'a';
   410     077E  3061               	movlw	97
   411     077F  00F7               	movwf	_Tx_data
   412                           
   413                           ;UART_Task_slave.c: 39:                     TXREG = Tx_data;
   414     0780  3061               	movlw	97
   415     0781  0099               	movwf	25	;volatile
   416                           
   417                           ;UART_Task_slave.c: 40:                     _delay((unsigned long)((50)*(6000000/4000.0)
      +                          ));
   418     0782  3062               	movlw	98
   419     0783  00F6               	movwf	??_main+1
   420     0784  3065               	movlw	101
   421     0785  00F5               	movwf	??_main
   422     0786                     u117:
   423     0786  0BF5               	decfsz	??_main,f
   424     0787  2F86               	goto	u117
   425     0788  0BF6               	decfsz	??_main+1,f
   426     0789  2F86               	goto	u117
   427     078A  2F8B               	nop2
   428                           
   429                           ;UART_Task_slave.c: 41:                     break;
   430     078B  2FC4               	goto	l776
   431     078C                     l766:
   432                           
   433                           ;UART_Task_slave.c: 43:                     Tx_data = 'b';
   434     078C  3062               	movlw	98
   435     078D  00F7               	movwf	_Tx_data
   436                           
   437                           ;UART_Task_slave.c: 44:                     TXREG = Tx_data;
   438     078E  3062               	movlw	98
   439     078F  0099               	movwf	25	;volatile
   440                           
   441                           ;UART_Task_slave.c: 45:                     _delay((unsigned long)((50)*(6000000/4000.0)
      +                          ));
   442     0790  3062               	movlw	98
   443     0791  00F6               	movwf	??_main+1
   444     0792  3065               	movlw	101
   445     0793  00F5               	movwf	??_main
   446     0794                     u127:
   447     0794  0BF5               	decfsz	??_main,f
   448     0795  2F94               	goto	u127
   449     0796  0BF6               	decfsz	??_main+1,f
   450     0797  2F94               	goto	u127
   451     0798  2F99               	nop2
   452                           
   453                           ;UART_Task_slave.c: 46:                     break;
   454     0799  2FC4               	goto	l776
   455     079A                     l768:
   456                           
   457                           ;UART_Task_slave.c: 48:                     Tx_data = 'c';
   458     079A  3063               	movlw	99
   459     079B  00F7               	movwf	_Tx_data
   460                           
   461                           ;UART_Task_slave.c: 49:                     TXREG = Tx_data;
   462     079C  3063               	movlw	99
   463     079D  0099               	movwf	25	;volatile
   464                           
   465                           ;UART_Task_slave.c: 50:                     _delay((unsigned long)((50)*(6000000/4000.0)
      +                          ));
   466     079E  3062               	movlw	98
   467     079F  00F6               	movwf	??_main+1
   468     07A0  3065               	movlw	101
   469     07A1  00F5               	movwf	??_main
   470     07A2                     u137:
   471     07A2  0BF5               	decfsz	??_main,f
   472     07A3  2FA2               	goto	u137
   473     07A4  0BF6               	decfsz	??_main+1,f
   474     07A5  2FA2               	goto	u137
   475     07A6  2FA7               	nop2
   476                           
   477                           ;UART_Task_slave.c: 51:                     break;
   478     07A7  2FC4               	goto	l776
   479     07A8                     l770:
   480                           
   481                           ;UART_Task_slave.c: 53:                     Tx_data = 'd';
   482     07A8  3064               	movlw	100
   483     07A9  00F7               	movwf	_Tx_data
   484                           
   485                           ;UART_Task_slave.c: 54:                     TXREG = Tx_data;
   486     07AA  3064               	movlw	100
   487     07AB  0099               	movwf	25	;volatile
   488                           
   489                           ;UART_Task_slave.c: 55:                     _delay((unsigned long)((50)*(6000000/4000.0)
      +                          ));
   490     07AC  3062               	movlw	98
   491     07AD  00F6               	movwf	??_main+1
   492     07AE  3065               	movlw	101
   493     07AF  00F5               	movwf	??_main
   494     07B0                     u147:
   495     07B0  0BF5               	decfsz	??_main,f
   496     07B1  2FB0               	goto	u147
   497     07B2  0BF6               	decfsz	??_main+1,f
   498     07B3  2FB0               	goto	u147
   499     07B4  2FB5               	nop2
   500                           
   501                           ;UART_Task_slave.c: 56:                     break;
   502     07B5  2FC4               	goto	l776
   503     07B6                     l774:
   504     07B6  0878               	movf	_Rx_buf,w
   505                           
   506                           ; Switch size 1, requested type "simple"
   507                           ; Number of cases is 4, Range of values is 65 to 68
   508                           ; switch strategies available:
   509                           ; Name         Instructions Cycles
   510                           ; simple_byte           13     7 (average)
   511                           ; direct_byte           23    11 (fixed)
   512                           ; jumptable            263     9 (fixed)
   513                           ;	Chosen strategy is simple_byte
   514     07B7  3A41               	xorlw	65	; case 65
   515     07B8  1903               	skipnz
   516     07B9  2F7E               	goto	l764
   517     07BA  3A03               	xorlw	3	; case 66
   518     07BB  1903               	skipnz
   519     07BC  2F8C               	goto	l766
   520     07BD  3A01               	xorlw	1	; case 67
   521     07BE  1903               	skipnz
   522     07BF  2F9A               	goto	l768
   523     07C0  3A07               	xorlw	7	; case 68
   524     07C1  1903               	skipnz
   525     07C2  2FA8               	goto	l770
   526     07C3  2FC4               	goto	l776
   527     07C4                     l776:
   528                           
   529                           ;UART_Task_slave.c: 60:             lcd_cmd(0x80);
   530     07C4  3080               	movlw	128
   531     07C5  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   532     07CA                     l778:
   533                           
   534                           ;UART_Task_slave.c: 61:             lcd_print_characters(0);
   535     07CA  3000               	movlw	0
   536     07CB  120A  118A  2734  120A  118A  	fcall	_lcd_print_characters
   537     07D0                     l780:
   538                           
   539                           ;UART_Task_slave.c: 62:             lcd_data(Rx_buf);
   540     07D0  0878               	movf	_Rx_buf,w
   541     07D1  120A  118A  26D3  120A  118A  	fcall	_lcd_data
   542     07D6                     l782:
   543                           
   544                           ;UART_Task_slave.c: 65:             lcd_cmd(0xC0);
   545     07D6  30C0               	movlw	192
   546     07D7  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   547     07DC                     l784:
   548                           
   549                           ;UART_Task_slave.c: 66:             lcd_print_characters(1);
   550     07DC  3001               	movlw	1
   551     07DD  120A  118A  2734  120A  118A  	fcall	_lcd_print_characters
   552                           
   553                           ;UART_Task_slave.c: 67:             lcd_data(Tx_data);
   554     07E2  0877               	movf	_Tx_data,w
   555     07E3  120A  118A  26D3  120A  118A  	fcall	_lcd_data
   556     07E8  2F75               	goto	l760
   557     07E9  120A  118A  2800   	ljmp	start
   558     07EC                     __end_of_main:
   559                           
   560                           	psect	text1
   561     0734                     __ptext1:	
   562 ;; *************** function _lcd_print_characters *****************
   563 ;; Defined at:
   564 ;;		line 115 in file "UART_Task_slave.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  type            1    wreg     unsigned char 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  type            1    3[COMMON] unsigned char 
   569 ;;  i               1    4[COMMON] unsigned char 
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   579 ;;      Params:         0       0       0       0       0
   580 ;;      Locals:         2       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0
   582 ;;      Totals:         2       0       0       0       0
   583 ;;Total ram usage:        2 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; Hardware stack levels required when called: 1
   586 ;; This function calls:
   587 ;;		_lcd_data
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593     0734                     _lcd_print_characters:	
   594                           ;psect for function _lcd_print_characters
   595                           
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _lcd_print_characters: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
   599                           ;lcd_print_characters@type stored from wreg
   600     0734  00F3               	movwf	lcd_print_characters@type
   601     0735                     l730:
   602                           
   603                           ;UART_Task_slave.c: 116:     unsigned char i;;UART_Task_slave.c: 119:     if (type == 0)
      +                           {
   604     0735  0873               	movf	lcd_print_characters@type,w
   605     0736  1D03               	btfss	3,2
   606     0737  2F39               	goto	u61
   607     0738  2F3A               	goto	u60
   608     0739                     u61:
   609     0739  2F50               	goto	l744
   610     073A                     u60:
   611     073A                     l732:
   612                           
   613                           ;UART_Task_slave.c: 120:         for (i = 0; i < 9; i++) {
   614     073A  01F4               	clrf	lcd_print_characters@i
   615     073B                     l738:
   616                           
   617                           ;UART_Task_slave.c: 121:             lcd_data(lcd_rx_str[i]);
   618     073B  0874               	movf	lcd_print_characters@i,w
   619     073C  3E2A               	addlw	(low (_lcd_rx_str| 0))& (0+255)
   620     073D  0084               	movwf	4
   621     073E  1383               	bcf	3,7	;select IRP bank0
   622     073F  0800               	movf	0,w
   623     0740  120A  118A  26D3  120A  118A  	fcall	_lcd_data
   624     0745                     l740:
   625                           
   626                           ;UART_Task_slave.c: 122:         }
   627     0745  3001               	movlw	1
   628     0746  00FF               	movwf	btemp+1
   629     0747  087F               	movf	btemp+1,w
   630     0748  07F4               	addwf	lcd_print_characters@i,f
   631     0749                     l742:
   632     0749  3009               	movlw	9
   633     074A  0274               	subwf	lcd_print_characters@i,w
   634     074B  1C03               	skipc
   635     074C  2F4E               	goto	u71
   636     074D  2F4F               	goto	u70
   637     074E                     u71:
   638     074E  2F3B               	goto	l738
   639     074F                     u70:
   640     074F  2F6A               	goto	l82
   641     0750                     l744:
   642     0750  0373               	decf	lcd_print_characters@type,w
   643     0751  1D03               	btfss	3,2
   644     0752  2F54               	goto	u81
   645     0753  2F55               	goto	u80
   646     0754                     u81:
   647     0754  2F6A               	goto	l82
   648     0755                     u80:
   649     0755                     l746:
   650                           
   651                           ;UART_Task_slave.c: 126:         for (i = 0; i < 9; i++) {
   652     0755  01F4               	clrf	lcd_print_characters@i
   653     0756                     l752:
   654                           
   655                           ;UART_Task_slave.c: 127:             lcd_data(lcd_tx_str[i]);
   656     0756  0874               	movf	lcd_print_characters@i,w
   657     0757  3E20               	addlw	(low (_lcd_tx_str| 0))& (0+255)
   658     0758  0084               	movwf	4
   659     0759  1383               	bcf	3,7	;select IRP bank0
   660     075A  0800               	movf	0,w
   661     075B  120A  118A  26D3  120A  118A  	fcall	_lcd_data
   662     0760                     l754:
   663                           
   664                           ;UART_Task_slave.c: 128:         }
   665     0760  3001               	movlw	1
   666     0761  00FF               	movwf	btemp+1
   667     0762  087F               	movf	btemp+1,w
   668     0763  07F4               	addwf	lcd_print_characters@i,f
   669     0764                     l756:
   670     0764  3009               	movlw	9
   671     0765  0274               	subwf	lcd_print_characters@i,w
   672     0766  1C03               	skipc
   673     0767  2F69               	goto	u91
   674     0768  2F6A               	goto	u90
   675     0769                     u91:
   676     0769  2F56               	goto	l752
   677     076A                     u90:
   678     076A                     l82:
   679     076A  0008               	return
   680     076B                     __end_of_lcd_print_characters:
   681                           
   682                           	psect	text2
   683     06D3                     __ptext2:	
   684 ;; *************** function _lcd_data *****************
   685 ;; Defined at:
   686 ;;		line 101 in file "UART_Task_slave.c"
   687 ;; Parameters:    Size  Location     Type
   688 ;;  i               1    wreg     unsigned char 
   689 ;; Auto vars:     Size  Location     Type
   690 ;;  i               1    2[COMMON] unsigned char 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, status,2, status,0, btemp+1
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   700 ;;      Params:         0       0       0       0       0
   701 ;;      Locals:         1       0       0       0       0
   702 ;;      Temps:          2       0       0       0       0
   703 ;;      Totals:         3       0       0       0       0
   704 ;;Total ram usage:        3 bytes
   705 ;; Hardware stack levels used: 1
   706 ;; This function calls:
   707 ;;		Nothing
   708 ;; This function is called by:
   709 ;;		_main
   710 ;;		_lcd_print_characters
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714     06D3                     _lcd_data:	
   715                           ;psect for function _lcd_data
   716                           
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _lcd_data: [wreg+status,2+status,0+btemp+1]
   720                           ;lcd_data@i stored from wreg
   721     06D3  00F2               	movwf	lcd_data@i
   722     06D4                     l720:
   723                           
   724                           ;UART_Task_slave.c: 101: void lcd_data(unsigned char i);UART_Task_slave.c: 102: {;UART_T
      +                          ask_slave.c: 103:     PORTC |= 0X08;
   725     06D4  1283               	bcf	3,5	;RP0=0, select bank0
   726     06D5  1303               	bcf	3,6	;RP1=0, select bank0
   727     06D6  1587               	bsf	7,3	;volatile
   728     06D7                     l722:
   729                           
   730                           ;UART_Task_slave.c: 104:     PORTD = i;
   731     06D7  0872               	movf	lcd_data@i,w
   732     06D8  0088               	movwf	8	;volatile
   733     06D9                     l724:
   734                           
   735                           ;UART_Task_slave.c: 105:     PORTC |= 0X01;
   736     06D9  1407               	bsf	7,0	;volatile
   737     06DA                     l726:
   738                           
   739                           ;UART_Task_slave.c: 106:     PORTC &= ~0X01;
   740     06DA  30FE               	movlw	254
   741     06DB  00FF               	movwf	btemp+1
   742     06DC  087F               	movf	btemp+1,w
   743     06DD  0587               	andwf	7,f	;volatile
   744     06DE                     l728:
   745                           
   746                           ;UART_Task_slave.c: 107:     _delay((unsigned long)((100)*(6000000/4000.0)));
   747     06DE  30C3               	movlw	195
   748     06DF  00F1               	movwf	??_lcd_data+1
   749     06E0  30CD               	movlw	205
   750     06E1  00F0               	movwf	??_lcd_data
   751     06E2                     u157:
   752     06E2  0BF0               	decfsz	??_lcd_data,f
   753     06E3  2EE2               	goto	u157
   754     06E4  0BF1               	decfsz	??_lcd_data+1,f
   755     06E5  2EE2               	goto	u157
   756     06E6                     l69:
   757     06E6  0008               	return
   758     06E7                     __end_of_lcd_data:
   759                           
   760                           	psect	text3
   761     0712                     __ptext3:	
   762 ;; *************** function _lcd_init *****************
   763 ;; Defined at:
   764 ;;		line 84 in file "UART_Task_slave.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   778 ;;      Params:         0       0       0       0       0
   779 ;;      Locals:         0       0       0       0       0
   780 ;;      Temps:          2       0       0       0       0
   781 ;;      Totals:         2       0       0       0       0
   782 ;;Total ram usage:        2 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; Hardware stack levels required when called: 1
   785 ;; This function calls:
   786 ;;		_lcd_cmd
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792     0712                     _lcd_init:	
   793                           ;psect for function _lcd_init
   794                           
   795     0712                     l656:	
   796                           ;incstack = 0
   797                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   798                           
   799                           
   800                           ;UART_Task_slave.c: 85:     lcd_cmd(0x38);
   801     0712  3038               	movlw	56
   802     0713  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   803                           
   804                           ;UART_Task_slave.c: 86:     lcd_cmd(0x0C);
   805     0718  300C               	movlw	12
   806     0719  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   807                           
   808                           ;UART_Task_slave.c: 87:     lcd_cmd(0x06);
   809     071E  3006               	movlw	6
   810     071F  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   811                           
   812                           ;UART_Task_slave.c: 88:     lcd_cmd(0x01);
   813     0724  3001               	movlw	1
   814     0725  120A  118A  26FB  120A  118A  	fcall	_lcd_cmd
   815     072A                     l658:
   816                           
   817                           ;UART_Task_slave.c: 89:     _delay((unsigned long)((2)*(6000000/4000.0)));
   818     072A  3004               	movlw	4
   819     072B  00F4               	movwf	??_lcd_init+1
   820     072C  30E4               	movlw	228
   821     072D  00F3               	movwf	??_lcd_init
   822     072E                     u167:
   823     072E  0BF3               	decfsz	??_lcd_init,f
   824     072F  2F2E               	goto	u167
   825     0730  0BF4               	decfsz	??_lcd_init+1,f
   826     0731  2F2E               	goto	u167
   827     0732  0000               	nop
   828     0733                     l63:
   829     0733  0008               	return
   830     0734                     __end_of_lcd_init:
   831                           
   832                           	psect	text4
   833     06FB                     __ptext4:	
   834 ;; *************** function _lcd_cmd *****************
   835 ;; Defined at:
   836 ;;		line 92 in file "UART_Task_slave.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;  i               1    wreg     unsigned char 
   839 ;; Auto vars:     Size  Location     Type
   840 ;;  i               1    2[COMMON] unsigned char 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0, btemp+1
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   850 ;;      Params:         0       0       0       0       0
   851 ;;      Locals:         1       0       0       0       0
   852 ;;      Temps:          2       0       0       0       0
   853 ;;      Totals:         3       0       0       0       0
   854 ;;Total ram usage:        3 bytes
   855 ;; Hardware stack levels used: 1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_main
   860 ;;		_lcd_init
   861 ;;		_lcd_clear
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865     06FB                     _lcd_cmd:	
   866                           ;psect for function _lcd_cmd
   867                           
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+btemp+1]
   871                           ;lcd_cmd@i stored from wreg
   872     06FB  00F2               	movwf	lcd_cmd@i
   873     06FC                     l626:
   874                           
   875                           ;UART_Task_slave.c: 92: void lcd_cmd(unsigned char i);UART_Task_slave.c: 93: {;UART_Task
      +                          _slave.c: 94:     PORTC &= ~0X08;
   876     06FC  30F7               	movlw	247
   877     06FD  00FF               	movwf	btemp+1
   878     06FE  087F               	movf	btemp+1,w
   879     06FF  1283               	bcf	3,5	;RP0=0, select bank0
   880     0700  1303               	bcf	3,6	;RP1=0, select bank0
   881     0701  0587               	andwf	7,f	;volatile
   882     0702                     l628:
   883                           
   884                           ;UART_Task_slave.c: 95:     PORTD = i;
   885     0702  0872               	movf	lcd_cmd@i,w
   886     0703  0088               	movwf	8	;volatile
   887     0704                     l630:
   888                           
   889                           ;UART_Task_slave.c: 96:     PORTC |= 0X01;
   890     0704  1407               	bsf	7,0	;volatile
   891     0705                     l632:
   892                           
   893                           ;UART_Task_slave.c: 97:     PORTC &= ~0X01;
   894     0705  30FE               	movlw	254
   895     0706  00FF               	movwf	btemp+1
   896     0707  087F               	movf	btemp+1,w
   897     0708  0587               	andwf	7,f	;volatile
   898                           
   899                           ;UART_Task_slave.c: 98:     _delay((unsigned long)((100)*(6000000/4000.0)));
   900     0709  30C3               	movlw	195
   901     070A  00F1               	movwf	??_lcd_cmd+1
   902     070B  30CD               	movlw	205
   903     070C  00F0               	movwf	??_lcd_cmd
   904     070D                     u177:
   905     070D  0BF0               	decfsz	??_lcd_cmd,f
   906     070E  2F0D               	goto	u177
   907     070F  0BF1               	decfsz	??_lcd_cmd+1,f
   908     0710  2F0D               	goto	u177
   909     0711                     l66:
   910     0711  0008               	return
   911     0712                     __end_of_lcd_cmd:
   912                           
   913                           	psect	text5
   914     06BF                     __ptext5:	
   915 ;; *************** function _init *****************
   916 ;; Defined at:
   917 ;;		line 72 in file "UART_Task_slave.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, btemp+1
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0
   933 ;;      Temps:          0       0       0       0       0
   934 ;;      Totals:         0       0       0       0       0
   935 ;;Total ram usage:        0 bytes
   936 ;; Hardware stack levels used: 1
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		_main
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944     06BF                     _init:	
   945                           ;psect for function _init
   946                           
   947     06BF                     l644:	
   948                           ;incstack = 0
   949                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1]
   950                           
   951                           
   952                           ;UART_Task_slave.c: 74:     TRISD = 0x00;
   953     06BF  1683               	bsf	3,5	;RP0=1, select bank1
   954     06C0  1303               	bcf	3,6	;RP1=0, select bank1
   955     06C1  0188               	clrf	8	;volatile
   956     06C2                     l646:
   957                           
   958                           ;UART_Task_slave.c: 75:     OPTION_REG&= 0X7F;
   959     06C2  307F               	movlw	127
   960     06C3  00FF               	movwf	btemp+1
   961     06C4  087F               	movf	btemp+1,w
   962     06C5  0581               	andwf	1,f	;volatile
   963     06C6                     l648:
   964                           
   965                           ;UART_Task_slave.c: 78:     TRISC = 0x80;
   966     06C6  3080               	movlw	128
   967     06C7  0087               	movwf	7	;volatile
   968     06C8                     l650:
   969                           
   970                           ;UART_Task_slave.c: 79:     TXSTA = 0x20;
   971     06C8  3020               	movlw	32
   972     06C9  0098               	movwf	24	;volatile
   973     06CA                     l652:
   974                           
   975                           ;UART_Task_slave.c: 80:     RCSTA = 0x90;
   976     06CA  3090               	movlw	144
   977     06CB  1283               	bcf	3,5	;RP0=0, select bank0
   978     06CC  1303               	bcf	3,6	;RP1=0, select bank0
   979     06CD  0098               	movwf	24	;volatile
   980     06CE                     l654:
   981                           
   982                           ;UART_Task_slave.c: 81:     SPBRG = 0x09;
   983     06CE  3009               	movlw	9
   984     06CF  1683               	bsf	3,5	;RP0=1, select bank1
   985     06D0  1303               	bcf	3,6	;RP1=0, select bank1
   986     06D1  0099               	movwf	25	;volatile
   987     06D2                     l60:
   988     06D2  0008               	return
   989     06D3                     __end_of_init:
   990     007E                     btemp	set	126	;btemp
   991     007E                     wtemp0	set	126
   992                           
   993                           	psect	config
   994                           
   995                           ;Config register CONFIG @ 0x2007
   996                           ;	Oscillator Selection bits
   997                           ;	FOSC = EXTRC, RC oscillator
   998                           ;	Watchdog Timer Enable bit
   999                           ;	WDTE = OFF, WDT disabled
  1000                           ;	Power-up Timer Enable bit
  1001                           ;	PWRTE = OFF, PWRT disabled
  1002                           ;	Brown-out Reset Enable bit
  1003                           ;	BOREN = OFF, BOR disabled
  1004                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1005                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1006                           ;	Data EEPROM Memory Code Protection bit
  1007                           ;	CPD = OFF, Data EEPROM code protection off
  1008                           ;	Flash Program Memory Write Enable bits
  1009                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1010                           ;	In-Circuit Debugger Mode bit
  1011                           ;	DEBUG = 0x1, unprogrammed default
  1012                           ;	Flash Program Memory Code Protection bit
  1013                           ;	CP = OFF, Code protection off
  1014     2007                     	org	8199
  1015     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      0      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_lcd_init
    _main->_lcd_print_characters
    _lcd_print_characters->_lcd_data
    _lcd_init->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     254
                                              5 COMMON     2     2      0
                               _init
                            _lcd_cmd
                           _lcd_data
                           _lcd_init
               _lcd_print_characters
 ---------------------------------------------------------------------------------
 (1) _lcd_print_characters                                 2     2      0     202
                                              3 COMMON     2     2      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
   _lcd_cmd
   _lcd_data
   _lcd_init
     _lcd_cmd
   _lcd_print_characters
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      14       5       25.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1D      12        0.0%
ABS                  0      0      1D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Oct 09 01:44:54 2024

                           pc 0002                            l60 06D2                            l63 0733  
                          l66 0711                            l82 076A                            l69 06E6  
                          u60 073A                            u61 0739                            u70 074F  
                          u71 074E                            u80 0755                            u81 0754  
                          u90 076A                            u91 0769                            fsr 0004  
                         l630 0704                           l632 0705                           l720 06D4  
                         l650 06C8                           l626 06FC                           l722 06D7  
                         l730 0735                           l652 06CA                           l644 06BF  
                         l628 0702                           l724 06D9                           l740 0745  
                         l732 073A                           l654 06CE                           l646 06C2  
                         l726 06DA                           l742 0749                           l648 06C6  
                         l656 0712                           l728 06DE                           l752 0756  
                         l744 0750                           l760 0775                           l658 072A  
                         l754 0760                           l746 0755                           l738 073B  
                         l770 07A8                           l762 077B                           l756 0764  
                         l780 07D0                           l764 077E                           l782 07D6  
                         l766 078C                           l774 07B6                           l758 076B  
                         l784 07DC                           l768 079A                           l776 07C4  
                         l778 07CA                           u100 077B                           u101 077A  
                         u117 0786                           u127 0794                           u137 07A2  
                         u147 07B0                           u157 06E2                           u167 072E  
                         u177 070D                           fsr0 0004                           indf 0000  
                        _PIR1 000C                          _main 076B                          _init 06BF  
                        btemp 007E                          start 0000                         ?_main 0070  
                       ?_init 0070                         _RCREG 001A                         _RCSTA 0018  
                       _SPBRG 0099                         _PORTC 0007                         _PORTD 0008  
                       _TRISC 0087                         _TRISD 0088                         _TXREG 0019  
                       _TXSTA 0098               __end_of_lcd_cmd 0712                         pclath 000A  
                       status 0003                         wtemp0 007E               __initialization 07EC  
                __end_of_main 07EC                  __end_of_init 06D3                        ??_main 0075  
                      ??_init 0070              __end_of_lcd_data 06E7              __end_of_lcd_init 0734  
                      _Rx_buf 0078                     ??_lcd_cmd 0070       __end_of__initialization 07FC  
              __pcstackCOMMON 0070                  __pidataBANK0 06E7                    __pmaintext 076B  
       lcd_print_characters@i 0074                    _lcd_rx_str 002A                     ?_lcd_data 0070  
                  _lcd_tx_str 0020                     ?_lcd_init 0070                       _Tx_data 0077  
                     __ptext1 0734                       __ptext2 06D3                       __ptext3 0712  
                     __ptext4 06FB                       __ptext5 06BF                       _lcd_cmd 06FB  
                  ??_lcd_data 0070                    ??_lcd_init 0073          end_of_initialization 07FC  
         start_initialization 07EC                    init_fetch0 06AC                   __pdataBANK0 0020  
                 __pbssCOMMON 0077                     ___latbits 0002  __end_of_lcd_print_characters 076B  
                    ?_lcd_cmd 0070                     lcd_data@i 0072          _lcd_print_characters 0734  
                    _lcd_data 06D3                      _lcd_init 0712         ?_lcd_print_characters 0070  
                    lcd_cmd@i 0072      lcd_print_characters@type 0073                      init_ram0 06B0  
                  _OPTION_REG 0081        ??_lcd_print_characters 0073  
